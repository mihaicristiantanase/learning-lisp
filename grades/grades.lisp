;;; compute the grades for candidates

(load "~/.sbclrc")
(ql:quickload "parse-float")

(defparameter criterias
  '(("3rd party libraries to minimum"                     . 7)
    ("App icon"                                           . 4)
    ("App running"                                        . 10)
    ("Architecture"                                       . 10)
    ("Code formatting"                                    . 4)
    ("Comments"                                           . 5)
    ("Copied code's copyright"                            . 6)
    ("Data stored securely"                               . 2)
    ("Full implementation"                                . 10)
    ("Functional programming (map, filter, reduce, sort)" . 6)
    ("Generics"                                           . 6)
    ("Git does not contain generated files"               . 6)
    ("Git history (commits, branches, etc.)"              . 6)
    ("Independent of 3rd party libs"                      . 7)
    ("Libs instead of copied code"                        . 7)
    ("Memory aware (strong, weak, unowned)"               . 10)
    ("Modular project"                                    . 8)
    ("Naming (variables, functions, etc)"                 . 8)
    ("No UI bugs"                                         . 6)
    ("No code duplication"                                . 9)
    ("No crashes"                                         . 10)
    ("No useless code (initializing, constants, etc)"     . 5)
    ("Simplicity above everything else"                   . 10)
    ("Solution for multiple devices"                      . 6)
    ("Splashscreen"                                       . 4)
    ("Thread identification"                              . 3)
    ("Treated all cases"                                  . 9)
    ("UI implementation (Autolayout, etc.)"               . 4)
    ("UI tests"                                           . 1)
    ("Understanding of types"                             . 10)
    ("Unit tests"                                         . 4)
    ("Xibs instead of Multiple Storyboards"               . 9)))

(defun parse-criteria (line)
  (let ((pipe-idx (search "|" line)))
    (if (null pipe-idx)
      nil
      (let ((criteria (string-trim " " (subseq line 0 pipe-idx)))
            (grade (parse-float:parse-float
                     (string-trim " " (subseq line (+ 1 pipe-idx)))
                     :junk-allowed t)))
        (list criteria grade)))))

(defun load-grades (path)
  (let ((skipped-key-lines 0)
        (grades '()))
    (with-open-file (stream path)
      (do ((line (read-line stream nil) (read-line stream nil)))
        ((null line))
        (when (> skipped-key-lines 0)
          (if (< skipped-key-lines 2)
            (incf skipped-key-lines)
            (push (parse-criteria line) grades)))
        (when (search "SUBJECT" line)
          (incf skipped-key-lines))))
    (reverse grades)))

(defun compute-average (grades)
  (/ (reduce #'+ grades :key #'cadr) (length grades)))

(defun compute-my-average (grades)
  (let* ((values (mapcar #'(lambda (x)
                             (let ((criteria (car x))
                                   (grade (cdr x)))
                               (cons (cdr (assoc criteria criterias :test #'string=))
                                     grade)))
                         grades))
         (total (reduce #'+ (mapcar #'(lambda (x) (* (first x) (second x))) values)))
         (sum (reduce #'+ values :key #'car)))
    (/ total sum)))

(defun compute-grades (path)
  (let* ((grades (load-grades path))
         (found (remove-if #'(lambda (x) (null (cadr x))) grades))
         (missing (remove-if-not #'(lambda (x) (null (cadr x))) grades)))
    (format t "~&GRADE: ~0,1f" (compute-average found))
    (format t "~&MIHAI'S GRADE: ~0,1f" (compute-my-average found))
    (format t "~&Missing criterias: ~{~&  ~a~}~%" (mapcar #'car missing))))

(defun run (args)
  (if (equal (length args) 2)
    (compute-grades (cadr args))
    (progn
      (format t "~&Should run as ~A <path-to-file>~&" (first args))
      (exit))))

(defun main (&optional (args *posix-argv*)) (run args))

(main '("" "~/workspace/interviews/FlorentinDana/checklist-result.txt"))
